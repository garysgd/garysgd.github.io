<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-02-27T18:18:12+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">if: Learn</title><subtitle>Exploring Machine Learning and Theoretical Work | Gary Phua</subtitle><entry><title type="html">Reference Frames for Orbital Mechanics</title><link href="http://localhost:4000/space/2025/02/17/orbital-mechanics.html" rel="alternate" type="text/html" title="Reference Frames for Orbital Mechanics" /><published>2025-02-17T00:00:00+08:00</published><updated>2025-02-17T00:00:00+08:00</updated><id>http://localhost:4000/space/2025/02/17/orbital-mechanics</id><content type="html" xml:base="http://localhost:4000/space/2025/02/17/orbital-mechanics.html"><![CDATA[<p>In a simple two-body problem where two bodies have finite mass, their trajectories in space will follow an elliptical orbit. When the mass of one of the bodies is much larger than the other, \(m_1&gt;&gt;m_2\), we can approximate the larger body to be stationary while the smaller body will orbit around it. The trajectory of the smaller body can be modelled with either the Keplerian or Cartesian reference frames, each with their own pros and cons. The Cartesian reference frame is useful for numerical calculations, such as deriving future trajectories of an object given the current trajectory. The Keplerian frame is useful for gaining a more intuitive understanding of the object’s orbit as it describes mathematically the phase space of the object’s orbit.</p>

<h4 id="cartesian-reference-frame">Cartesian Reference Frame</h4>
<p align="center">
<img src="/images/orbit1.jpg" alt="Orbit Image" width="500" />
</p>

<p>This is the reference frame that is familiar to most people, with position \(\vec{r} = [x, y, z]\) and velocity \(\vec{v} = [v_x, v_y, v_z]\). It is also an inertial reference frame, with point of reference being the larger body which is typically Earth. The cartesian state vector is described as a six dimensional vector formed from the concatenation of the position and velocity vectors:</p>

\[\vec{c} = [x, y, z, v_x, v_y, v_z]\]

<p>This state vector along with the gravitational parameter \(\mu\) is sufficient to calculate future trajectories of the object.</p>

<h4 id="keplerian-reference-frame">Keplerian Reference Frame</h4>

<p>In the Keplerian reference frame, an orbit is described not by instantaneous position and velocity components but by six <strong>orbital elements</strong> that capture the shape, size, orientation, and current position along the orbit. These six elements are:</p>

<ul>
  <li>
    <p><strong>Semimajor Axis</strong> \(\textbf{a}\):<br />
Defines the size of the orbit—the average distance between the orbiting object and the central body.</p>
  </li>
  <li>
    <p><strong>Eccentricity,</strong> \(\textbf{e}\):<br />
Describes the shape of the orbit. An eccentricity of 0 corresponds to a circular orbit, while values between 0 and 1 indicate an ellipse.</p>
  </li>
  <li>
    <p><strong>Inclination,</strong> (i):<br />
The tilt of the orbital plane relative to a chosen reference plane (often the equatorial or ecliptic plane).</p>
  </li>
  <li>
    <p><strong>Right Ascension of the Ascending Node</strong> (\(\Omega\)):<br />
The angle in the reference plane from a fixed direction (typically the vernal equinox) to the point where the orbiting body crosses the reference plane going upward (the ascending node).</p>
  </li>
  <li>
    <p><strong>Argument of Periapsis,</strong> (\(\omega\\)):<br />
Measured in the orbital plane, this angle specifies the direction of the closest approach (periapsis) relative to the ascending node.</p>
  </li>
  <li>
    <p><strong>True Anomaly,</strong> (\nu):<br />
The angle (also measured in the orbital plane) that indicates the object’s current position along its orbit relative to the periapsis.</p>
  </li>
</ul>

<p>These elements combine to form the <strong>Keplerian state vector</strong>:</p>

\[\vec{k} = [\,a,\; e,\; i,\; \Omega,\; \omega,\; \nu\,].\]

<p>Together with the gravitational parameter (\mu), this 6‑element vector fully defines the orbit in the two‑body problem. Even though it does not directly include position and velocity components, these orbital elements contain all the necessary information—through Kepler’s laws and the laws of motion—to compute the object’s future trajectory.</p>

<p>By knowing (\vec{k}) and (\mu), one can derive the instantaneous Cartesian state vector (and vice versa) through established transformation formulas. This makes the Keplerian state vector not only a compact representation of the orbit’s geometry but also sufficient for predicting the motion of the orbiting object over time.</p>]]></content><author><name></name></author><category term="space" /><category term="orbital-mechanics" /><summary type="html"><![CDATA[In a simple two-body problem where two bodies have finite mass, their trajectories in space will follow an elliptical orbit. When the mass of one of the bodies is much larger than the other, \(m_1&gt;&gt;m_2\), we can approximate the larger body to be stationary while the smaller body will orbit around it. The trajectory of the smaller body can be modelled with either the Keplerian or Cartesian reference frames, each with their own pros and cons. The Cartesian reference frame is useful for numerical calculations, such as deriving future trajectories of an object given the current trajectory. The Keplerian frame is useful for gaining a more intuitive understanding of the object’s orbit as it describes mathematically the phase space of the object’s orbit.]]></summary></entry><entry><title type="html">Reinforcement Learning for Large Language Models</title><link href="http://localhost:4000/machine-learning/reinforcement-learning/2025/02/12/grpo.html" rel="alternate" type="text/html" title="Reinforcement Learning for Large Language Models" /><published>2025-02-12T00:00:00+08:00</published><updated>2025-02-12T00:00:00+08:00</updated><id>http://localhost:4000/machine-learning/reinforcement-learning/2025/02/12/grpo</id><content type="html" xml:base="http://localhost:4000/machine-learning/reinforcement-learning/2025/02/12/grpo.html"><![CDATA[<p>The introduction of reasoning methods marks a paradigm shift in the way computation is performed using large language models. 
Reasoning was first introduced into the mainstream with ChatGPT o1, where reasoning tokens were generated as part of the output.
The more tokens were generated, the higher quality the model would perform in benchmarks, in particular those related to math and coding.
This also has a nice analogy/mapping back to the classic space-time tradeoff for computing.
With a high amount of storage, less compute is needed to solve a problem.
If computing can be done on the fly, then less storage is needed.
This is also apt in another sense, since pretraining neural networks has also been shown as a compression/storage technique.
The prompts/inputs to the LLM can be thought of as a key or unique identifier, and when paired with the compressed LLM it is able to decompress a lossy version of the training data.</p>

<p>While previous LLMs could reason to some extent using basic prompt engineering techniques like ‘think step by step’, o1 was one of the first models where reasoning was part of training the model. A further breakthrough came with the introduction of deepseek r1, a reasoning model with open sourced code. The launch of r1 caused a huge waves in both the tech sector and the economy, as training costs were reported to be far lower than that of previous LLMs. This resulted in a large drop in market cap for GPU manufacturers that provide hardware for training models.</p>

<p>One of the key innovations of the deepseek model is the Group Relative Policy Optimization (GRPO) algorithm, which removes the need for training the critic network that is typically a part of the Proximal Policy Optimization (PPO) used to train previous LLMs. We will first introduce how PPO works in the context of LLMs before highlighting the innovations of GRPO.</p>

<p>The PPO surrogate objective is given by:
\(J_{\text{PPO}}(\theta) = \mathbb{E}_{q \sim P(Q),\, o \sim \pi_{\theta}^{\text{old}}(\cdot \mid q)}
\left[
\frac{1}{|o|} \sum_{t=1}^{|o|}
\min\!\left\{
\frac{\pi_\theta(o_t \mid q, o_{&lt;t})}{\pi_{\theta}^{\text{old}}(o_t \mid q, o_{&lt;t})} A_t,\,
\text{clip}\!\left(
\frac{\pi_\theta(o_t \mid q, o_{&lt;t})}{\pi_{\theta}^{\text{old}}(o_t \mid q, o_{&lt;t})},\, 1-\epsilon,\, 1+\epsilon
\right) A_t
\right\}
\right].\)</p>

<p>We can first go through this equation term by term in the context of natural language processing to gain better insight on how PPO works. We can start with the policy:</p>

\[\pi_\theta(o_t \mid q, o_{&lt;t})\]

<p>For nlp the policy \(\pi_\theta\) is determined by the neural network, typically based on the transformer architecture. The neural network takes in \(t-1\) input tokens of a sequence \(o\) along with the prompt sequence \(q\) to predict the \(t\) token of the sequence denoted by \(o_t\). We can illustrate this with a simple example. While tokens typically denote subwords akin to phonemes rather than actual words, we will assume each word is a token for the sake of simplification.</p>

<p>Given a prompt \(q\) such as “What is the capital of France?” the policy model \(\pi_\theta\) starts to predict starting with the first token \(o_1\) which could be “The”. The policy model would then output subsequent tokens dependent based on the prompt and the previous output tokens. The ratio \(\frac{\pi_\theta(o_t \mid q, o_{&lt;t})}{\pi_{\theta}^{\text{old}}(o_t \mid q, o_{&lt;t})}\) then measures how much more likely the new policy is to predict the subsequent token \(o_t\) relative to the old policy. It acts as a weight for the advantage \(A_t\) which we will now elaborate now.</p>

<p>For PPO, the advantage \(A_t\) can be expressed as</p>]]></content><author><name></name></author><category term="machine-learning" /><category term="reinforcement-learning" /><category term="python" /><category term="llms" /><category term="generative ai" /><summary type="html"><![CDATA[The introduction of reasoning methods marks a paradigm shift in the way computation is performed using large language models. Reasoning was first introduced into the mainstream with ChatGPT o1, where reasoning tokens were generated as part of the output. The more tokens were generated, the higher quality the model would perform in benchmarks, in particular those related to math and coding. This also has a nice analogy/mapping back to the classic space-time tradeoff for computing. With a high amount of storage, less compute is needed to solve a problem. If computing can be done on the fly, then less storage is needed. This is also apt in another sense, since pretraining neural networks has also been shown as a compression/storage technique. The prompts/inputs to the LLM can be thought of as a key or unique identifier, and when paired with the compressed LLM it is able to decompress a lossy version of the training data.]]></summary></entry><entry><title type="html">Decision Tree Regressors</title><link href="http://localhost:4000/machine-learning/regression/2024/12/20/decision-tree-regressor.html" rel="alternate" type="text/html" title="Decision Tree Regressors" /><published>2024-12-20T00:00:00+08:00</published><updated>2024-12-20T00:00:00+08:00</updated><id>http://localhost:4000/machine-learning/regression/2024/12/20/decision-tree-regressor</id><content type="html" xml:base="http://localhost:4000/machine-learning/regression/2024/12/20/decision-tree-regressor.html"><![CDATA[<p>Most people practicing data science would be aware of tree based learning methods like XGBoost.
Despite LLMs occupying the current spotlight, these tree based methods are still widely used and even <a href="https://arxiv.org/pdf/2207.08815">outperform neural networks</a> when dealing with tabular/structured data.</p>

<p>Neural networks, while powerful in their own right, excel at modelling unstructured data through their architecture, be it positional encoding + self-attention for seq2seq models or convolutions for images.
Tabular data still forms a large part of most companies’ data source and building models that leverage such data can yield great value through recommendation systems and targeted marketing campaigns.</p>

<p>I have always been interested in learning about the inner workings of such tree based methods, and will explain them in detail, starting with the decision tree regressor which is the foundation for tree based methods. While learning and writing on this topic I came across and was inspired by a useful <a href="https://randomrealizations.com/">blog</a> that helped me gain an intuitive understanding on these methods.</p>

<p>Before diving in to decision tree regressors, what is a regressor? A regressor is a trained model that learns a function which returns or outputs a continuous variable based on a given input. For example, a regressor can learn a simple linear function y = 2x. Inputting a value of 5 to this regressor would yield a value of 10 as the target output.</p>

<hr />

<h2 id="overview">Overview</h2>

<p>How do we estimate a function? Given a set of training data inputs X and label y we can assign mean(y) for any value of X.</p>

\[f(x) = mean(y)\]

<p>We can extend this further to apply thresholds at certain values of \(x\) where</p>

\[f(x&lt;n) = mean(y\mid x &lt;n)\]

<p><img src="/images/binarytree.jpg" alt="Alt text" /></p>

<p>This can also be illustrated with the binary tree above, where the threshold n=0. If \(x\) is less than 0, the model predicts y=0.15 and it predicts y=0.85 for any value greater or equal to 0. The binary tree above shows one threshold value with depth=1. We can illustrate this example more clearly when fitting a decision tree regressor of various depths to a sigmoid function: \(y = \frac{1}{1 + e^{-x}}\).</p>

<p><img src="/images/scatter.jpg" alt="An example image" /></p>

<p>From the image above we can see how well our decision tree regressor fits the sigmoid function at various depths of the tree. Depth=0 is denoted by the green line where we naively assume that any value x will approximate the mean of y. For depth=1 we can see a threshold at \(x=0\) and gradually see our model increasingly fit the sigmoid function with increasing depth.</p>

<hr />

<h2 id="code-explained">Code Explained</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">mean</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">sum</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="k">else</span> <span class="mf">0.0</span>

<span class="k">def</span> <span class="nf">variance</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sum</span><span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="nf">mean</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="mf">0.0</span>
</code></pre></div></div>

<p>Before going through the decision tree regressor line by line we first define two helper functions to obtain the mean and variance. Mean is used to determine the approximate value at each threshold, while variance (also known as mean square error) determines which threshold we use.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">stack</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">root</span><span class="p">}]</span>

<span class="n">current</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
<span class="n">Xc</span><span class="p">,</span> <span class="n">yc</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">]</span>
<span class="n">depth</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">]</span>

<span class="nf">if </span><span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">max_depth</span>
    <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">min_samples_split</span>
    <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">yc</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
    <span class="k">continue</span>
</code></pre></div></div>
<p>We initialize root, which is the top node of the decision tree, and stack, which keeps track of the nodes of the decision tree and their associated depths. When the maximum depth is reached or the target values at a node contain only one unique value, the mean of the target values is assigned as the node’s value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parent_var</span> <span class="o">=</span> <span class="nf">variance</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
<span class="n">best_feat</span><span class="p">,</span> <span class="n">best_thresh</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
<span class="n">best_gain</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>Next we let the existing variance before splitting be the variance of all the labels for that parent node. We also initialise the best input feature, best threshold and best gain. Gain would be a measure and decider on whether to use a certain input index as a threshold.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">Xc</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
        <span class="n">thresholds</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">({</span><span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">Xc</span><span class="p">})</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">thresholds</span><span class="p">:</span>
            <span class="n">left_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">]</span>
            <span class="n">right_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">t</span><span class="p">]</span>

            <span class="c1"># If one side is empty, ignore this split
</span>            <span class="k">if</span> <span class="ow">not</span> <span class="n">left_y</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">right_y</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="n">w</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
            <span class="n">child_var</span> <span class="o">=</span> <span class="n">w</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">w</span><span class="p">)</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">right_y</span><span class="p">)</span>
            <span class="n">gain</span> <span class="o">=</span> <span class="n">parent_var</span> <span class="o">-</span> <span class="n">child_var</span>

            <span class="k">if</span> <span class="n">gain</span> <span class="o">&gt;</span> <span class="n">best_gain</span><span class="p">:</span>
                <span class="n">best_gain</span> <span class="o">=</span> <span class="n">gain</span>
                <span class="n">best_feat</span> <span class="o">=</span> <span class="n">f</span>
                <span class="n">best_thresh</span> <span class="o">=</span> <span class="n">t</span>
</code></pre></div></div>
<p>If the input set Xc is not empty, we iterate across all possible features and all input indices for that feature. For a data with 1-dimensional input features we simply iterate across all indices.
The input indices which results in the best gain would be kept as the thresholds.</p>

<p>Gain is defined as the difference between the variance of the target variables before the split and the weighted sum of the variance after the split.</p>

\[\text{Gain} = \sigma^2_{\text{parent}} - \left( \frac{N_L}{N} \cdot \sigma^2_L + \frac{N_R}{N} \cdot \sigma^2_R \right)\]

<p>Intuitively this means that the variance, also known as the mean square error is reduced compared to before the threshold was applied.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">best_feat</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">best_gain</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
    <span class="k">continue</span>

<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_feat</span>
<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">threshold</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_thresh</span>
</code></pre></div></div>
<p>If no split is found that reduces gain, we let that node be a leaf. If the gain is reduced, we save the best features and threshold recorded.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">best_feat</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">best_thresh</span><span class="p">:</span>
        <span class="n">left_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
        <span class="n">left_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">right_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
        <span class="n">right_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># Push stack to be processed next
</span><span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]})</span>
<span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]})</span>
</code></pre></div></div>
<p>Finally, we update the tree with the new threshold found and split the tree according to the new threshold. We record this into the stack.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_tree</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">min_samples_split</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>

    <span class="n">root</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">root</span><span class="p">}]</span>

    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="n">Xc</span><span class="p">,</span> <span class="n">yc</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">depth</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="sh">'</span><span class="s">node</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># Stopping conditions: depth reached, insufficient samples, or all targets identical
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">max_depth</span>
            <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">min_samples_split</span>
            <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">yc</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="c1"># Compute parent variance for this node
</span>        <span class="n">parent_var</span> <span class="o">=</span> <span class="nf">variance</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>

        <span class="c1"># Find best split across all features/thresholds
</span>        <span class="n">best_feat</span><span class="p">,</span> <span class="n">best_thresh</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
        <span class="n">best_gain</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># If Xc is empty, skip
</span>        <span class="k">if</span> <span class="n">Xc</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">thresholds</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">({</span><span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">Xc</span><span class="p">})</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">thresholds</span><span class="p">:</span>
                    <span class="n">left_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">]</span>
                    <span class="n">right_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">t</span><span class="p">]</span>

                    <span class="c1"># If one side is empty, ignore this split
</span>                    <span class="k">if</span> <span class="ow">not</span> <span class="n">left_y</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">right_y</span><span class="p">:</span>
                        <span class="k">continue</span>

                    <span class="n">w</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
                    <span class="n">child_var</span> <span class="o">=</span> <span class="n">w</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">w</span><span class="p">)</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">right_y</span><span class="p">)</span>
                    <span class="n">gain</span> <span class="o">=</span> <span class="n">parent_var</span> <span class="o">-</span> <span class="n">child_var</span>

                    <span class="k">if</span> <span class="n">gain</span> <span class="o">&gt;</span> <span class="n">best_gain</span><span class="p">:</span>
                        <span class="n">best_gain</span> <span class="o">=</span> <span class="n">gain</span>
                        <span class="n">best_feat</span> <span class="o">=</span> <span class="n">f</span>
                        <span class="n">best_thresh</span> <span class="o">=</span> <span class="n">t</span>

        <span class="c1"># If no meaningful split was found, make this node a leaf
</span>        <span class="k">if</span> <span class="n">best_feat</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">best_gain</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="c1"># Record the chosen feature &amp; threshold
</span>        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_feat</span>
        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">threshold</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_thresh</span>

        <span class="c1"># Partition data into left/right subsets
</span>        <span class="n">left_X</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">left_y</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">right_X</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">right_y</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">best_feat</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">best_thresh</span><span class="p">:</span>
                <span class="n">left_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
                <span class="n">left_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
                <span class="n">right_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

        <span class="c1"># Initialize child nodes
</span>        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># Push them to be processed next
</span>        <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]})</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]})</span>

    <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<p>We can combine this all we just discussed into a function train_tree that iterates recursively until the stopping criteria is reached. Where the stopping criteria is defined as max depth of tree, insufficient samples or identical targets at a node.</p>

<h2 id="example-implementation">Example Implementation</h2>
<p>We can implement this on a simple example with input data X as some discrete values and target variable y as the sigmoid function applied to X.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">0.01</span><span class="o">*</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">300</span><span class="p">,</span> <span class="mi">300</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span> 
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">math</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]</span> 
<span class="n">tree</span> <span class="o">=</span> <span class="nf">train_tree</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span>
<span class="p">{</span><span class="sh">'</span><span class="s">feature</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">threshold</span><span class="sh">'</span><span class="p">:</span> <span class="o">-</span><span class="mf">0.01</span><span class="p">,</span> <span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.21409955507181783</span><span class="p">},</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.7849506095629721</span><span class="p">}}</span>
</code></pre></div></div>

<p>By training the tree on a sigmoid distribution with depth=1, we can see that the threshold of \(-0.01 \approx 0\) which is denoted by the green line in our earlier plot as the sigmoid function is symmetric. This acts as a sanity test and also shows the structure of the decision tree regressor as well as how it works after training. If the input value is less than the threshold, the model will return the left value, and the right value otherwise.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">sample</span><span class="p">):</span>
    <span class="c1"># If this node is a leaf, return its value
</span>    <span class="k">if</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span>
    
    <span class="c1"># Otherwise, compare the sample's feature to the threshold
</span>    <span class="k">if</span> <span class="n">sample</span><span class="p">[</span><span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">threshold</span><span class="sh">"</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">],</span> <span class="n">sample</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">],</span> <span class="n">sample</span><span class="p">)</span>
</code></pre></div></div>

<p>We can write a predict function above to recursively propagate the input value across the branches of the tree till it reaches a node.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">7</span><span class="p">])</span>
<span class="mf">0.21409955507181783</span>
<span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="p">[</span><span class="mi">7</span><span class="p">])</span>
<span class="mf">0.7849506095629721</span>
</code></pre></div></div>

<p>Using positive and negative values for a simple trained tree depth=1 we can the different predicted values depending on whether the input is above or below the threshold we have derived.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Decision tree regressors offer an intuitive way to model continuous target values through sequential splitting on feature thresholds. By measuring the reduction in variance (or mean squared error) at each potential split, we iteratively build a tree that partitions the input space into regions with relatively homogeneous target values. While simple to conceptualise and implement, this foundation underpins more sophisticated models commonly used in data science, such as gradient boosted machines and xgboost. With an understanding of how a single decision tree regressor is constructed, we can have a greater appreciation of these models beyond viewing them as sklearn functions or blackboxes.</p>

<h2 id="references">References</h2>
<ol>
  <li><a href="https://arxiv.org/pdf/2207.08815">Why do tree-based models still outperform deep learning on tabular data?</a></li>
  <li><a href="https://randomrealizations.com/posts/gradient-boosting-machine-from-scratch/">How to Build a Gradient Boosting Machine from Scratch</a></li>
</ol>]]></content><author><name></name></author><category term="machine-learning" /><category term="regression" /><category term="decision-trees" /><category term="python" /><summary type="html"><![CDATA[Most people practicing data science would be aware of tree based learning methods like XGBoost. Despite LLMs occupying the current spotlight, these tree based methods are still widely used and even outperform neural networks when dealing with tabular/structured data.]]></summary></entry></feed>