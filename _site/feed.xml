<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-28T17:13:37+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">if: Learn</title><subtitle>Exploring Machine Learning and Theoretical Work</subtitle><entry><title type="html">Building a Simple Decision Tree Regressor from Scratch</title><link href="http://localhost:4000/machine-learning/regression/2024/12/20/decision-tree-regressor.html" rel="alternate" type="text/html" title="Building a Simple Decision Tree Regressor from Scratch" /><published>2024-12-20T00:00:00+08:00</published><updated>2024-12-20T00:00:00+08:00</updated><id>http://localhost:4000/machine-learning/regression/2024/12/20/decision-tree-regressor</id><content type="html" xml:base="http://localhost:4000/machine-learning/regression/2024/12/20/decision-tree-regressor.html"><![CDATA[<p>#ifthenlearn</p>

<p>Most people learning data science would be aware of tree based learning methods like xgboost.
Despite LLMs occupying the current spotlight, these tree based methods are still widely used and even outperform neural networks when dealing with tabular/structured data. [https://arxiv.org/pdf/2207.08815].</p>

<p>Neural networks, while powerful in their own right, excel at modelling unstructured data through their architecture, be it positional encoding + self attention for seq2seq models or convolutions for images.
Tabular data still forms a large part of most companies data source and building models that leverage such data can yield great value through recommendation systems and targeted marketing campaigns.</p>

<p>I have always been interested in learning about the inner workings of such tree based methods, and will explain while learning about them, starting with the decision tree regressor which is the foundation for tree based methods.</p>

<p>Before diving in to decision tree regressors, what is a regressor? A regressor is a trained model that learns a function which returns or outputs a continuous variable based on a given input. For example, a regressor can learn a simple linear function y = 2x. Inputting a value of 5 to this regressor would yield a value of 10 as the target output.</p>

<hr />

<h2 id="overview">Overview</h2>

<p>How do we estimate a function? Given a set of training data inputs X and label y we can assign mean(y) for any value of X.</p>

\[f(x) = mean(y)\]

<p>We can extend this further to apply thresholds at certain values of \(x\) where</p>

\[f(x&lt;n) = mean(y\mid x &lt;n)\]

<p><img src="/images/binarytree.jpg" alt="Alt text" /></p>

<p>This can be also be illustrated with the binary tree above, where the threshold n=0. If x is less than 0, the model predicts y=0.15 and it predicts y=0.85 for any value greater or equal to 0. The binary tree above shows one threshold value with depth=1. We can illustrate this example more clearly when fitting a decision tree regressor of various depths to a sigmoid function: \(y = \frac{1}{1 + e^{-x}}\).</p>

<p><img src="/images/scatter.jpg" alt="An example image" /></p>

<p>From the image above we can see how well our decision tree regressor fits the sigmoid function at various depths of the tree. Depth=0 is denoted by the green line where we naively assume that any value x will approximate the mean of y. For depth = 1 we can see a threshold at x=0 and gradually see that the</p>

<hr />

<h2 id="code-explained">Code Explained</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">mean</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">sum</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="k">else</span> <span class="mf">0.0</span>

<span class="k">def</span> <span class="nf">variance</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sum</span><span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="nf">mean</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">return</span> <span class="mf">0.0</span>
</code></pre></div></div>

<p>Before going through the decision tree regressor line by line we first define two helper functions to obtain the mean and variance. Mean is used to determine the approximate value at each threshold, while variance (also known as mean square error) determines which threshold we use.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">stack</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">root</span><span class="p">}]</span>

<span class="n">current</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
<span class="n">Xc</span><span class="p">,</span> <span class="n">yc</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">]</span>
<span class="n">depth</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">]</span>

<span class="nf">if </span><span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">max_depth</span>
    <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">min_samples_split</span>
    <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">yc</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean_val</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
    <span class="k">continue</span>
</code></pre></div></div>
<p>We initialize root, which is the top node of the decision tree, and stack, which keeps track of the nodes of the decision tree and their associated depths. When the maximum depth is reached or the target values at a node contain only one unique value, the mean of the target values is assigned as the nodeâ€™s value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parent_var</span> <span class="o">=</span> <span class="nf">variance</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
<span class="n">best_feat</span><span class="p">,</span> <span class="n">best_thresh</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
<span class="n">best_gain</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>Next we let the existing variance before splitting be the variance of all the labels for that parent node. We also initialise the best input feature, best threshold and best gain. Gain would be a measure and decider on whether to use a certain input index as a threshold.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">Xc</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
        <span class="n">thresholds</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">({</span><span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">Xc</span><span class="p">})</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">thresholds</span><span class="p">:</span>
            <span class="n">left_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">]</span>
            <span class="n">right_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">t</span><span class="p">]</span>

            <span class="c1"># If one side is empty, ignore this split
</span>            <span class="k">if</span> <span class="ow">not</span> <span class="n">left_y</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">right_y</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="n">w</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
            <span class="n">child_var</span> <span class="o">=</span> <span class="n">w</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">w</span><span class="p">)</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">right_y</span><span class="p">)</span>
            <span class="n">gain</span> <span class="o">=</span> <span class="n">parent_var</span> <span class="o">-</span> <span class="n">child_var</span>

            <span class="k">if</span> <span class="n">gain</span> <span class="o">&gt;</span> <span class="n">best_gain</span><span class="p">:</span>
                <span class="n">best_gain</span> <span class="o">=</span> <span class="n">gain</span>
                <span class="n">best_feat</span> <span class="o">=</span> <span class="n">f</span>
                <span class="n">best_thresh</span> <span class="o">=</span> <span class="n">t</span>
</code></pre></div></div>
<p>If the input set Xc is not empty, we iterate across all possible features and all input indices for that feature. For a data with 1-dimensional input features we simply iterate across all indices.
The input indices which results in the best gain would be kept as the thresholds.</p>

<p>Gain is defined as the difference between the variance of the target variables before the split and the weighted sum of the variance after the split.</p>

\[\text{Gain} = \sigma^2_{\text{parent}} - \left( \frac{N_L}{N} \cdot \sigma^2_L + \frac{N_R}{N} \cdot \sigma^2_R \right)\]

<p>Intuitively this means that the variance, also known as the mean square error is reduced compared to before the threshold was applied.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">best_feat</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">best_gain</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean_val</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
    <span class="k">continue</span>

<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_feat</span>
<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">threshold</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_thresh</span>
</code></pre></div></div>
<p>If no split is found that reduces gain, we let that node be a leaf. If the gain is reduced, we save the best features and threshold recorded.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">best_feat</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">best_thresh</span><span class="p">:</span>
        <span class="n">left_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
        <span class="n">left_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">right_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
        <span class="n">right_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># Push stack to be processed next
</span><span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]})</span>
<span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]})</span>
</code></pre></div></div>
<p>Finally, we update the tree with the new threshold found and split the tree according to the new threshold. We record this into the stack.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_tree</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">min_samples_split</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>

    <span class="n">root</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">root</span><span class="p">}]</span>

    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="n">Xc</span><span class="p">,</span> <span class="n">yc</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">depth</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">],</span> <span class="n">current</span><span class="p">[</span><span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="sh">'</span><span class="s">node</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># Stopping conditions: depth reached, insufficient samples, or all targets identical
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">max_depth</span>
            <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">min_samples_split</span>
            <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">yc</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="c1"># Compute parent variance for this node
</span>        <span class="n">parent_var</span> <span class="o">=</span> <span class="nf">variance</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>

        <span class="c1"># Find best split across all features/thresholds
</span>        <span class="n">best_feat</span><span class="p">,</span> <span class="n">best_thresh</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
        <span class="n">best_gain</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">-inf</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># If Xc is empty, skip
</span>        <span class="k">if</span> <span class="n">Xc</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">Xc</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">thresholds</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">({</span><span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">Xc</span><span class="p">})</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">thresholds</span><span class="p">:</span>
                    <span class="n">left_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">]</span>
                    <span class="n">right_y</span> <span class="o">=</span> <span class="p">[</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">t</span><span class="p">]</span>

                    <span class="c1"># If one side is empty, ignore this split
</span>                    <span class="k">if</span> <span class="ow">not</span> <span class="n">left_y</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">right_y</span><span class="p">:</span>
                        <span class="k">continue</span>

                    <span class="n">w</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
                    <span class="n">child_var</span> <span class="o">=</span> <span class="n">w</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">left_y</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">w</span><span class="p">)</span> <span class="o">*</span> <span class="nf">variance</span><span class="p">(</span><span class="n">right_y</span><span class="p">)</span>
                    <span class="n">gain</span> <span class="o">=</span> <span class="n">parent_var</span> <span class="o">-</span> <span class="n">child_var</span>

                    <span class="k">if</span> <span class="n">gain</span> <span class="o">&gt;</span> <span class="n">best_gain</span><span class="p">:</span>
                        <span class="n">best_gain</span> <span class="o">=</span> <span class="n">gain</span>
                        <span class="n">best_feat</span> <span class="o">=</span> <span class="n">f</span>
                        <span class="n">best_thresh</span> <span class="o">=</span> <span class="n">t</span>

        <span class="c1"># If no meaningful split was found, make this node a leaf
</span>        <span class="k">if</span> <span class="n">best_feat</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">best_gain</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">mean</span><span class="p">(</span><span class="n">yc</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="c1"># Record the chosen feature &amp; threshold
</span>        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_feat</span>
        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">threshold</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_thresh</span>

        <span class="c1"># Partition data into left/right subsets
</span>        <span class="n">left_X</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">left_y</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">right_X</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">right_y</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">Xc</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">best_feat</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">best_thresh</span><span class="p">:</span>
                <span class="n">left_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
                <span class="n">left_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">right_X</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
                <span class="n">right_y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">yc</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

        <span class="c1"># Initialize child nodes
</span>        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># Push them to be processed next
</span>        <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">left_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">]})</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_X</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">:</span> <span class="n">right_y</span><span class="p">,</span> <span class="sh">"</span><span class="s">depth</span><span class="sh">"</span><span class="p">:</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">node</span><span class="sh">"</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">]})</span>

    <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<p>We can combine this all we just discussed into a function train_tree that iterates recursively until the stopping criteria is reached. Where the stopping criteria is defined as max depth of tree, insufficient samples or identical targets at a node.</p>

<h2 id="example-implementation">Example Implementation</h2>
<p>We can implement this on a simple example with input data X as some discrete values and target variable y as the sigmoid function applied to X.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">0.01</span><span class="o">*</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">300</span><span class="p">,</span> <span class="mi">300</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span> 
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">math</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]</span> 
<span class="n">tree</span> <span class="o">=</span> <span class="nf">train_tree</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span>
<span class="p">{</span><span class="sh">'</span><span class="s">feature</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">threshold</span><span class="sh">'</span><span class="p">:</span> <span class="o">-</span><span class="mf">0.01</span><span class="p">,</span> <span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.21409955507181783</span><span class="p">},</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.7849506095629721</span><span class="p">}}</span>
</code></pre></div></div>

<p>By training the tree on a sigmoid distribution with depth=1, we can see that the threshold of \(-0.01 \approx 0\) which is denoted by the green line in our earlier plot as the sigmoid function is symmetric. This acts as a sanity test and also shows the structure of the decision tree regressor as well as how it works after training. If the input value is less than the threshold the model will return the left value, and the right value otherwise.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">sample</span><span class="p">):</span>
    <span class="c1"># If this node is a leaf, return its value
</span>    <span class="k">if</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">]</span>
    
    <span class="c1"># Otherwise, compare the sample's feature to the threshold
</span>    <span class="k">if</span> <span class="n">sample</span><span class="p">[</span><span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">feature</span><span class="sh">"</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">threshold</span><span class="sh">"</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">left</span><span class="sh">"</span><span class="p">],</span> <span class="n">sample</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">],</span> <span class="n">sample</span><span class="p">)</span>
</code></pre></div></div>

<p>We can write a predict above to</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="mi">7</span><span class="p">])</span>
<span class="mf">0.21409955507181783</span>
<span class="nf">predict</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="p">[</span><span class="mi">7</span><span class="p">])</span>
<span class="mf">0.7849506095629721</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="machine-learning" /><category term="regression" /><category term="decision-trees" /><category term="python" /><summary type="html"><![CDATA[#ifthenlearn]]></summary></entry></feed>